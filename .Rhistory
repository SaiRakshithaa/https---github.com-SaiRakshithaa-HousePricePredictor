ggtitle("Correlation Heatmap")
# Scatter Plot with Regression Line (Price vs Sqft Living)
ggplot(data_cleaned, aes(x=sqft_living, y=price)) +
geom_point(alpha=0.3) +
geom_smooth(method="lm", col="blue") +
ggtitle("Price vs Sqft Living with Regression Line")
# Boxplot of House Prices by Number of Bedrooms
ggplot(data_cleaned, aes(factor(bedrooms), price)) +
geom_boxplot() +
ggtitle("House Prices by Number of Bedrooms")
# Feature Importance using Random Forest
set.seed(123)
model <- randomForest(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + grade, data=data_cleaned)
varImpPlot(model, main="Random Forest Feature Importance")
# Geographical Distribution of House Prices
ggplot(data_cleaned, aes(x=long, y=lat, color=price)) +
geom_point(alpha=0.5, size=1.5) +
scale_color_gradient(low="blue", high="red") +
ggtitle("Geographical Distribution of House Prices") +
theme_minimal()
# Geographical Distribution of House Prices
ggplot(data_cleaned, aes(x=long, y=lat, color=price)) +
geom_point(alpha=0.5, size=1.5) +
scale_color_gradient(low="blue", high="red") +
ggtitle("Geographical Distribution of House Prices") +
theme_minimal()
# Split data into training and testing sets
set.seed(1234)
index <- sample(nrow(data_cleaned), 0.8 * nrow(data_cleaned))
# Geographical Distribution of House Prices
ggplot(data_cleaned, aes(x=long, y=lat, color=price)) +
geom_point(alpha=0.5, size=1.5) +
scale_color_gradient(low="blue", high="red") +
ggtitle("Geographical Distribution of House Prices") +
theme_minimal()
# Split data into training and testing sets
set.seed(1234)
index <- sample(nrow(data_cleaned), 0.8 * nrow(data_cleaned))
training <- data_cleaned[index, ]
test <- data_cleaned[-index, ]
# Build the linear regression model
model_lm <- lm(price ~ ., data=training)
# Build the linear regression model
model_lm <- lm(price ~ ., data=training)
summary(model_lm)
# Boxplot of House Prices by Number of Bedrooms
ggplot(data_cleaned, aes(factor(bedrooms), price)) +
geom_boxplot() +
ggtitle("House Prices by Number of Bedrooms")
# Split data into training and testing sets
set.seed(1234)
index <- sample(nrow(data_cleaned), 0.8 * nrow(data_cleaned))
training <- data_cleaned[index, ]
test <- data_cleaned[-index, ]
# Build the linear regression model
model_lm <- lm(price ~ ., data=training)
summary(model_lm)
# Detect outliers using IQR method
training$residual <- model_lm$residuals
Q1 <- quantile(training$residual, 0.25)
Q3 <- quantile(training$residual, 0.75)
IQR_val <- IQR(training$residual)
training_no_outliers <- training %>% filter(residual >= (Q1 - 1.5 * IQR_val) & residual <= (Q3 + 1.5 * IQR_val)) %>%
select(-residual)
# Build the model without outliers
model_lm_no_outliers <- lm(price ~ ., data=training_no_outliers)
summary(model_lm_no_outliers)
# Check for multicollinearity
library(car)
vif(model_lm_no_outliers)
# Prediction on test data
predicted <- predict(model_lm_no_outliers, newdata=test)
# Calculate MAPE and RMSE
library(Metrics)
mape_val <- mape(test$price, predicted)
rmse_val <- rmse(test$price, predicted)
# Accuracy
accuracy <- 1 - mape_val
# Print results
print(paste("MAPE: ", mape_val))
print(paste("RMSE: ", rmse_val))
print(paste("Accuracy: ", accuracy))
install.packages("shiny")
# Load necessary libraries
library(ggplot2)
library(caret)
library(dplyr)
library(corrplot)
library(randomForest)
install.packages("caret")
install.packages("corrplot")
# Load necessary libraries
library(ggplot2)
library(caret)
library(dplyr)
library(corrplot)
install.packages("lattice")
# Load necessary libraries
library(ggplot2)
library(caret)
library(dplyr)
library(corrplot)
library(randomForest)
# Load data
data <- read.csv("house_prices.csv")
# Load data
data <- read.csv("D:\\Rakshu\\Rprogramming\\Rproject1\\kc_house_data.csv")
# Data preprocessing
data$date <- as.Date(data$date, "%Y%m%dT000000")
data$total_sqft <- data$sqft_living + data$sqft_living15
data$age <- 2024 - data$yr_built
# Splitting data into training and testing sets
set.seed(123)
train_index <- createDataPartition(data$price, p=0.8, list=FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Build the linear regression model
model <- lm(price ~ bedrooms + bathrooms + sqft_living + floors + waterfront + view + condition + grade + age, data=train_data)
# Function to predict price based on user input
predict_price <- function(bedrooms, bathrooms, sqft_living, floors, waterfront, view, condition, grade, year_built, sqft_living15) {
# Create a new data frame based on the input
new_data <- data.frame(
bedrooms = bedrooms,
bathrooms = bathrooms,
sqft_living = sqft_living,
floors = floors,
waterfront = waterfront,
view = view,
condition = condition,
grade = grade,
age = 2024 - year_built,
sqft_living15 = sqft_living15
)
# Predict price using the trained model
predicted_price <- predict(model, newdata = new_data)
return(predicted_price)
}
# Example: Predict price with specific input
predicted_price <- predict_price(
bedrooms = 3,
bathrooms = 2,
sqft_living = 1800,
floors = 2,
waterfront = 0,
view = 1,
condition = 4,
grade = 7,
year_built = 1990,
sqft_living15 = 1600
)
print(paste("The predicted house price is:", round(predicted_price, 2)))
# Install and load shiny package
library(shiny)
# Define UI for the app
ui <- fluidPage(
titlePanel("House Price Prediction"),
sidebarLayout(
sidebarPanel(
numericInput("bedrooms", "Number of Bedrooms:", value = 3, min = 1, max = 10),
numericInput("bathrooms", "Number of Bathrooms:", value = 2, min = 1, max = 10),
numericInput("sqft_living", "Square Footage of Living Space:", value = 1800),
numericInput("floors", "Number of Floors:", value = 1, min = 1, max = 3),
numericInput("waterfront", "Waterfront (0 = No, 1 = Yes):", value = 0, min = 0, max = 1),
numericInput("view", "View (0-4):", value = 0, min = 0, max = 4),
numericInput("condition", "Condition (1-5):", value = 3, min = 1, max = 5),
numericInput("grade", "Grade (1-13):", value = 7, min = 1, max = 13),
numericInput("year_built", "Year Built:", value = 1990, min = 1800, max = 2024),
numericInput("sqft_living15", "Living Space 15:", value = 1800),
actionButton("predict", "Predict House Price")
),
mainPanel(
textOutput("price_output")
)
)
)
# Define server logic
server <- function(input, output) {
observeEvent(input$predict, {
# Use the predict_price function to predict price based on user inputs
predicted_price <- predict_price(
bedrooms = input$bedrooms,
bathrooms = input$bathrooms,
sqft_living = input$sqft_living,
floors = input$floors,
waterfront = input$waterfront,
view = input$view,
condition = input$condition,
grade = input$grade,
year_built = input$year_built,
sqft_living15 = input$sqft_living15
)
output$price_output <- renderText({
paste("The predicted house price is:", round(predicted_price, 2), "USD")
})
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(caret)
library(dplyr)
library(corrplot)
library(randomForest)
# Load data
data <- read.csv("D:\\Rakshu\\Rprogramming\\Rproject1\\kc_house_data.csv")
# Data preprocessing
data$date <- as.Date(data$date, "%Y%m%dT000000")
data$total_sqft <- data$sqft_living + data$sqft_living15
data$age <- 2024 - data$yr_built
# Splitting data into training and testing sets
set.seed(123)
train_index <- createDataPartition(data$price, p=0.8, list=FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Build the linear regression model
model <- lm(price ~ bedrooms + bathrooms + sqft_living + floors + waterfront + view + condition + grade + age, data=train_data)
# Function to predict price based on user input
predict_price <- function(bedrooms, bathrooms, sqft_living, floors, waterfront, view, condition, grade, year_built, sqft_living15) {
# Create a new data frame based on the input
new_data <- data.frame(
bedrooms = bedrooms,
bathrooms = bathrooms,
sqft_living = sqft_living,
floors = floors,
waterfront = waterfront,
view = view,
condition = condition,
grade = grade,
age = 2024 - year_built,
sqft_living15 = sqft_living15
)
# Predict price using the trained model
predicted_price <- predict(model, newdata = new_data)
return(predicted_price)
}
# Define UI for the app
ui <- fluidPage(
titlePanel("House Price Prediction"),
sidebarLayout(
sidebarPanel(
numericInput("bedrooms", "Number of Bedrooms:", value = 3, min = 1, max = 10),
numericInput("bathrooms", "Number of Bathrooms:", value = 2, min = 1, max = 10),
numericInput("sqft_living", "Square Footage of Living Space:", value = 1800),
numericInput("floors", "Number of Floors:", value = 1, min = 1, max = 3),
numericInput("waterfront", "Waterfront (0 = No, 1 = Yes):", value = 0, min = 0, max = 1),
numericInput("view", "View (0-4):", value = 0, min = 0, max = 4),
numericInput("condition", "Condition (1-5):", value = 3, min = 1, max = 5),
numericInput("grade", "Grade (1-13):", value = 7, min = 1, max = 13),
numericInput("year_built", "Year Built:", value = 1990, min = 1800, max = 2024),
numericInput("sqft_living15", "Living Space 15:", value = 1800),
actionButton("predict", "Predict House Price")
),
mainPanel(
textOutput("price_output"),
plotOutput("heatmap"),
plotOutput("scatter"),
plotOutput("boxplot_bedrooms"),
plotOutput("boxplot_floors"),
plotOutput("importance_plot"),
plotOutput("residuals_plot")
)
)
)
# Define server logic
server <- function(input, output) {
observeEvent(input$predict, {
# Use the predict_price function to predict price based on user inputs
predicted_price <- predict_price(
bedrooms = input$bedrooms,
bathrooms = input$bathrooms,
sqft_living = input$sqft_living,
floors = input$floors,
waterfront = input$waterfront,
view = input$view,
condition = input$condition,
grade = input$grade,
year_built = input$year_built,
sqft_living15 = input$sqft_living15
)
output$price_output <- renderText({
paste("The predicted house price is:", round(predicted_price, 2), "USD")
})
})
# Correlation Heatmap
output$heatmap <- renderPlot({
corr_matrix <- cor(data[, c("price", "bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "grade")])
corrplot(corr_matrix, method = "color", tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7, main = "Correlation Heatmap")
})
# Scatter Plot with Regression Line
output$scatter <- renderPlot({
ggplot(data, aes(x = sqft_living, y = price)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", col = "blue") +
ggtitle("Price vs. Sqft Living with Regression Line") +
theme_minimal()
})
# Boxplot for Bedrooms
output$boxplot_bedrooms <- renderPlot({
ggplot(data, aes(factor(bedrooms), price)) +
geom_boxplot() +
ggtitle("House Prices by Number of Bedrooms") +
theme_minimal()
})
# Boxplot for Floors
output$boxplot_floors <- renderPlot({
ggplot(data, aes(factor(floors), price)) +
geom_boxplot() +
ggtitle("House Prices by Number of Floors") +
theme_minimal()
})
# Feature Importance using Random Forest
output$importance_plot <- renderPlot({
rf_model <- randomForest(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + grade, data = train_data)
varImpPlot(rf_model, main = "Random Forest Feature Importance")
})
# Residual Plot for Linear Regression Model
output$residuals_plot <- renderPlot({
lm_model <- lm(price ~ sqft_living + bedrooms + bathrooms, data = train_data)
residuals <- residuals(lm_model)
predicted <- predict(lm_model)
ggplot(data.frame(predicted, residuals), aes(x = predicted, y = residuals)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
ggtitle("Residuals vs Fitted Values") +
theme_minimal()
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp('D:/Rakshu/Rprogramming/Rproject1/Sai_code.R')
# Given data
normal_stress <- c(26.8, 25.4, 28.9, 23.6, 27.7, 23.9, 24.7, 28.1, 26.9, 27.4, 22.6, 25.6)
shear_resistance <- c(26.5, 27.3, 24.2, 27.1, 23.6, 25.9, 26.3, 22.5, 21.7, 21.4, 25.8, 24.9)
# Perform linear regression
model <- lm(shear_resistance ~ normal_stress)
# Display the regression coefficients (intercept and slope)
coefficients <- coef(model)
intercept <- coefficients[1]
slope <- coefficients[2]
cat("The estimated regression line is: mu_Y | x = ", intercept, " + (", slope, ") * x\n")
# Given values
mean_zinc <- 2.6  # sample mean
std_dev <- 0.3    # population standard deviation
n <- 36           # sample size
alpha_95 <- 0.05  # 95% confidence level (alpha)
alpha_99 <- 0.01  # 99% confidence level (alpha)
# Z-values for 95% and 99% confidence levels
z_95 <- qnorm(1 - alpha_95 / 2)  # z-value for 95% CI
z_99 <- qnorm(1 - alpha_99 / 2)  # z-value for 99% CI
# Confidence interval calculation
error_margin_95 <- z_95 * (std_dev / sqrt(n))
error_margin_99 <- z_99 * (std_dev / sqrt(n))
# Confidence intervals
ci_95 <- c(mean_zinc - error_margin_95, mean_zinc + error_margin_95)
ci_99 <- c(mean_zinc - error_margin_99, mean_zinc + error_margin_99)
# Output the results
cat("95% Confidence Interval: [", ci_95[1], ", ", ci_95[2], "]\n")
cat("99% Confidence Interval: [", ci_99[1], ", ", ci_99[2], "]\n")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Data for each variable
x1 <- c(1.31, 1.55, 0.99, 0.99, 1.01, 1.09, 1.08, 1.27, 0.99, 1.34,
1.30, 1.33, 1.86, 1.58, 1.97, 1.80, 1.75, 1.72, 1.68, 1.75,
2.19, 1.73)
x2 <- c(1.07, 1.49, 0.84, 0.83, 0.90, 0.93, 0.90, 1.08, 0.85, 1.13,
1.10, 1.10, 1.47, 1.34, 1.59, 1.56, 1.58, 1.43, 1.57, 1.59,
1.86, 1.67)
x3 <- c(0.44, 0.53, 0.34, 0.34, 0.36, 0.42, 0.40, 0.44, 0.36, 0.45,
0.45, 0.48, 0.60, 0.52, 0.67, 0.66, 0.63, 0.64, 0.72, 0.68,
0.75, 0.64)
x4 <- c(0.75, 0.90, 0.57, 0.54, 0.64, 0.61, 0.51, 0.77, 0.56, 0.77,
0.76, 0.77, 1.01, 0.95, 1.20, 1.02, 1.09, 1.02, 0.96, 1.08,
1.24, 1.14)
x5 <- c(0.35, 0.47, 0.32, 0.27, 0.30, 0.31, 0.31, 0.34, 0.29, 0.37,
0.38, 0.38, 0.65, 0.50, 0.59, 0.59, 0.59, 0.63, 0.68, 0.62,
0.72, 0.55)
y <- c(1.95, 2.90, 0.72, 0.81, 1.09, 1.22, 1.02, 1.93, 0.64, 2.08,
1.98, 1.90, 8.56, 4.49, 8.49, 6.17, 7.54, 6.36, 7.63, 7.78,
10.15, 6.88)
# Create the design matrix X (adding a column for the intercept)
X <- cbind(1, x1, x2, x3, x4, x5)
# Calculate the coefficients using the normal equations
beta <- solve(t(X) %*% X) %*% t(X) %*% y
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
x1 <- c(1.31, 1.55, 0.99, 0.99, 1.01, 1.09, 1.08, 1.27, 0.99, 1.34,
1.30, 1.33, 1.86, 1.58, 1.97, 1.80, 1.75, 1.72, 1.68, 1.75,
2.19, 1.73)
x2 <- c(1.07, 1.49, 0.84, 0.83, 0.90, 0.93, 0.90, 1.08, 0.85, 1.13,
1.10, 1.10, 1.47, 1.34, 1.59, 1.56, 1.58, 1.43, 1.57, 1.59,
1.86, 1.67)
x3 <- c(0.44, 0.53, 0.34, 0.34, 0.36, 0.42, 0.40, 0.44, 0.36, 0.45,
0.45, 0.48, 0.60, 0.52, 0.67, 0.66, 0.63, 0.64, 0.72, 0.68,
0.75, 0.64)
x4 <- c(0.75, 0.90, 0.57, 0.54, 0.64, 0.61, 0.51, 0.77, 0.56, 0.77,
0.76, 0.77, 1.01, 0.95, 1.20, 1.02, 1.09, 1.02, 0.96, 1.08,
1.24, 1.14)
x5 <- c(0.35, 0.47, 0.32, 0.27, 0.30, 0.31, 0.31, 0.34, 0.29, 0.37,
0.38, 0.38, 0.65, 0.50, 0.59, 0.59, 0.59, 0.63, 0.68, 0.62,
0.72, 0.55)
y <- c(1.95, 2.90, 0.72, 0.81, 1.09, 1.22, 1.02, 1.93, 0.64, 2.08,
1.98, 1.90, 8.56, 4.49, 8.49, 6.17, 7.54, 6.36, 7.63, 7.78,
10.15, 6.88)
x<-cbind(1,x1,x2,x3,x4,x5)
beta<-solve(t(x) %*% x) %*% x %*% y
source("~/.active-rstudio-document", echo=TRUE)
x <- c(26.8, 25.4, 28.9, 23.6, 27.7, 23.9, 24.7, 28.1, 26.9, 27.4, 22.6, 25.6)
y <- c(26.5, 27.3, 24.2, 27.1, 23.6, 25.9, 26.3, 22.5, 21.7, 21.4, 25.8, 24.9)
n<-length(x)
sum_x<-sum(x)
sum_y<-sum(y)
sum_xy<-sum(x*y)
sum_x2<-sum(x^2)
beta_1<-(n*sum_xy-sum_x*sum_y)/(n*sum_x2-sum_x^2)
beta_2<-mean(y)-beta_1*mean(x)
cat("The estimated regression equation is: y =", beta_0, "+", beta_1, "* x\n")
predicted<-beta_1+beta_2*normal_stress
cat("Estimated shear resistance for normal stress of", normal_stress, "is:", predicted_y, "\n")
cat("The estimated regression equation is: y =", beta_1, "+", beta_2, "* x\n")
normal_stress<-24.5
predicted<-beta_1+beta_2*normal_stress
cat("Estimated shear resistance for normal stress of", normal_stress, "is:", predicted_y, "\n")
cat("Estimated shear resistance for normal stress of", normal_stress, "is:", predicted, "\n")
marks <- c(88, 23, 76, 57, 6, 45, 81, 80, 40, 94, 59, 50, 111,
13, 20, 75, 67, 51, 26, 5, 77, 8, 89, 73, 74, 22, 7,
12, 58, 62, 85, 79, 66, 71, 3, 61, 35, 55, 10, 78, 16,
90, 83, 28, 69, 72, 9, 27, 25, 30, 32, 4, 37, 82, 15,
18, 86, 19, 21, 98, 46, 60, 52, 92, 33, 34, 53, 93, 91,
19, 100, 29, 54, 84, 56, 47, 17, 48, 70, 87, 63, 65,
24, 31, 14, 41, 64, 99, 95, 42, 38, 49, 2, 96, 68, 97,
36, 44, 43)
breaks<-seq(0,110,by=10)
freq<-table(cut(marks,breaks,right=FALSE))
freq
total<-sum(marks)
n<-length(x)
mean<-total/n
mean
total<-sum(marks)
n<-length(marks)
mean<-total/n
mean
sorted_val<-sort(marks)
sorted_val<-sort(marks)
if(n%%2==0){
median<-(sorted_val[n/2]+sorted_val[n/2+1])/2
}else{
median<-(sorted_val[(n+1)/2])
}
median
unique_val<-unique(marks)
table_1<-numeric(length(unique))
maximum<-max(table_1)
for(i in 1:length(unique_val)){
table_1<-sum(marks==unique_value[i])
}
for(i in 1:length(unique_val)){
table_1<-sum(marks==unique_val[i])
}
maximum<-max(table_1)
mode<-unique_val[maximum==table_1]
mode
unique_val<-unique(marks)
table_1<-numeric(length(unique))
for(i in 1:length(unique_val)){
table_1[i]<-sum(marks==unique_val[i])
}
maximum<-max(table_1)
mode<-unique_val[maximum==table_1]
mode
k3<-0.75*n
if(k3%%1==0){
(sorted_val[k3]+sorted_val[k3+1])/2
}else{
q3<-sorted_val[ceiling(k3)]
}
q3
k3<-0.75*n
if(k3%%1==0){
q3<-(sorted_val[k3]+sorted_val[k3+1])/2
}else{
q3<-sorted_val[ceiling(k3)]
}
q3
k3<-0.70*n
k3<-0.70*n
if(k3%%1==0){
q3<-(sorted_val[k3]+sorted_val[k3+1])/2
}else{
q3<-sorted_val[ceiling(k3)]
}
q3
#same with 0.19
hist(marks,breaks=breaks,main="Histogram of Marks",ylab="Frequencty",xlab="Marks",border="black")
breaks<-seq(0,110,by=10)
#same with 0.19
hist(marks,breaks=breaks,main="Histogram of Marks",ylab="Frequencty",xlab="Marks",border="black")
hist(marks, breaks = breaks, main = "Histogram of Marks",
xlab = "Marks", ylab = "Frequency", col = "lightblue", border = "black")
breaks<-seq(0,111,by=10)
hist(marks, breaks = breaks, main = "Histogram of Marks",
xlab = "Marks", ylab = "Frequency", col = "lightblue", border = "black")
breaks <- seq(from = floor(min_marks / 10) * 10, to = ceiling(max_marks / 10) * 10, by = 10)
min_marks <- min(marks)
max_marks <- max(marks)
breaks <- seq(from = floor(min_marks / 10) * 10, to = ceiling(max_marks / 10) * 10, by = 10)
hist(marks, breaks = breaks, main = "Histogram of Marks",
xlab = "Marks", ylab = "Frequency", col = "lightblue", border = "black")
library(shiny); runApp('D:/Rakshu/Rprogramming/Rproject1/Sai_code.R')
runApp('D:/Rakshu/Rprogramming/Rproject1/Sai_code.R')
